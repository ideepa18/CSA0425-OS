#include <stdio.h>

int main() {
    int n = 3; // number of processes
    int pid[] = {0, 1, 2}; // process IDs
    int burst_time[] = {2, 4, 8}; // burst times
    int arrival_time[] = {0, 0, 0}; // arrival times
    int completion_time[n]; // completion times
    int waiting_time[n]; // waiting times
    int turnaround_time[n]; // turnaround times
    int total_waiting_time = 0, total_turnaround_time = 0;

    // calculate completion times, waiting times, and turnaround times
    for (int i = 0; i < n; i++) {
        if (i == 0) {
            completion_time[i] = burst_time[i];
        } else {
            completion_time[i] = completion_time[i-1] + burst_time[i];
        }
        waiting_time[i] = completion_time[i] - burst_time[i] - arrival_time[i];
        turnaround_time[i] = completion_time[i] - arrival_time[i];
        total_waiting_time += waiting_time[i];
        total_turnaround_time += turnaround_time[i];
    }

    // calculate average waiting time and average turnaround time
    float avg_waiting_time = (float)total_waiting_time / n;
    float avg_turnaround_time = (float)total_turnaround_time / n;

    // print process details and results
    printf("Process\tBurst Time\tArrival Time\tCompletion Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", pid[i], burst_time[i], arrival_time[i],
            completion_time[i], waiting_time[i], turnaround_time[i]);
    }
    printf("Average waiting time: %.2f\n", avg_waiting_time);
    printf("Average turnaround time: %.2f\n", avg_turnaround_time);

    return 0;
}
